plugins {
    id 'java'
}

sourceCompatibility = 1.8

//   ____                            _                 _           
//  |  _ \  ___ _ __   ___ _ __   __| | ___ _ __   ___(_) ___  ___ 
//  | | | |/ _ \ '_ \ / _ \ '_ \ / _` |/ _ \ '_ \ / __| |/ _ \/ __|
//  | |_| |  __/ |_) |  __/ | | | (_| |  __/ | | | (__| |  __/\__ \
//  |____/ \___| .__/ \___|_| |_|\__,_|\___|_| |_|\___|_|\___||___/
//             |_|                                                 

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.micrometer:micrometer-registry-prometheus:1.7.3'
    implementation 'com.github.ben-manes.caffeine:caffeine:2.9.2'
    implementation 'org.recast4j:recast:1.5.5'
    implementation 'org.recast4j:detour:1.5.5'
    implementation 'org.recast4j:detour-crowd:1.5.5'
    implementation 'org.recast4j:detour-dynamic:1.5.5'
    implementation 'org.recast4j:detour-extras:1.5.5'
    implementation 'mysql:mysql-connector-java:8.0.28'
    implementation 'com.google.code.gson:gson:2.9.1'

    // JUnit Jupiter API and Engine for testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    // Use JUnit Jupiter BOM for consistent versioning
    testImplementation platform('org.junit:junit-bom:5.7.0')

    //local file
    implementation files("$rootDir/atavism_server/dist/lib/atavism.jar")
}

//   ____        _ _     _ 
//  | __ ) _   _(_) | __| |
//  |  _ \| | | | | |/ _` |
//  | |_) | |_| | | | (_| |
//  |____/ \__,_|_|_|\__,_|

sourceSets {
    main {
        java {
            // Include all the plugins
            file("$rootDir/src/plugins").listFiles().each { File file ->
                if (file.isDirectory()) {
                    def pluginSrcDir = "${file.path}/src"
                    if (new File(pluginSrcDir).exists()) {
                        srcDirs += pluginSrcDir
                    }
                }
            }

            // Include the dependency Java files in 'lib'
            // This is where AGIS sources should live
            srcDir 'src/lib'

            // Include any other specific directory as needed
            include '**/*.java'
            exclude '**/*Test.java'
        }
    }
}

jar {

    archiveFileName = 'agis.jar'

    // Assumes server dist files location
    destinationDirectory = file("$rootDir/atavism_server/dist/lib")

    // Exclude specific files that are known to cause duplicate issues
    exclude 'META-INF/LICENSE', 'META-INF/LICENSE.txt'

    // Alternatively, exclude all files in META-INF directory
    exclude 'META-INF/**'

    from sourceSets.main.output
    exclude '**/*Test.class'  // This excludes any compiled test classes

    // Generating and configuring the manifest
    manifest {
        attributes(
            'Manifest-Version': '1.0',
            'Main-Class': 'atavism.agis.server.AllInOneServer'
        )
    }

    // Ensuring the JAR task is built after compiling the sources
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

build {
    dependsOn jar
    dependsOn 'registerPlugins'
    dependsOn 'registerPluginsMessages'
    dependsOn 'setPluginsProperties'
    dependsOn 'genertateWorldSh'
}


//   ____                 _                                  _   
//  |  _ \  _____   _____| | ___  _ __  _ __ ___   ___ _ __ | |_ 
//  | | | |/ _ \ \ / / _ \ |/ _ \| '_ \| '_ ` _ \ / _ \ '_ \| __|
//  | |_| |  __/\ V /  __/ | (_) | |_) | | | | | |  __/ | | | |_ 
//  |____/ \___| \_/ \___|_|\___/| .__/|_| |_| |_|\___|_| |_|\__|
//                               |_|                             

task ('dev.reload') {
    description "Builds agis.jar, deploys it and restarts the Atavism Server process in the world container"
    group = 'Development:Build'

    dependsOn build

    doLast {

        exec {
            workingDir "$rootDir"
            commandLine "$rootDir/buildSrc/docker-single-reload.sh"
        }
    }
}

task 'dev.up' {
    description "Starts Docker containers for development"
    group = 'Development:Docker'
    doFirst {
        dockerCompose('up', "docker/compose/development/single.yml", ['-d'])
    }
}

task 'dev.down' {
    description "Stops Docker containers for development"
    group = 'Development:Docker'
    doFirst {
        dockerCompose('down', "docker/compose/development/single.yml")
    }
}

task 'dev.restart' {
    description "Restarts Docker containers for development"
    group = 'Development:Docker'
    dependsOn 'dev.down','dev.up'
}

task 'dev.logs' {
    description "Display logs for the dev containers"
    group = 'Development:Docker'
    doFirst {
        dockerCompose('logs', "docker/compose/development/single.yml", ["-f"])
    }
}

def dockerCompose(String action, String composeFile, List<String> additionalArgs = []) {
    def command = ['docker-compose', '-f', composeFile, action] + additionalArgs
    println "Executing: ${command.join(' ')}"
    exec {
        workingDir "."
        commandLine command
    }
}

//    ____          _                                        _   _             
//   / ___|___   __| | ___    __ _  ___ _ __   ___ _ __ __ _| |_(_) ___  _ __  
//  | |   / _ \ / _` |/ _ \  / _` |/ _ \ '_ \ / _ \ '__/ _` | __| |/ _ \| '_ \ 
//  | |__| (_) | (_| |  __/ | (_| |  __/ | | |  __/ | | (_| | |_| | (_) | | | |
//   \____\___/ \__,_|\___|  \__, |\___|_| |_|\___|_|  \__,_|\__|_|\___/|_| |_|
//                           |___/                                             
task registerPlugins(type : RegisterPluginsTask) {
    projectDir = project.projectDir
}
task registerPluginsMessages(type : RegisterPluginsMessagesTask) {
    projectDir = project.projectDir
}
task setPluginsProperties(type : SetPluginsPropertiesTask) {
    projectDir = project.projectDir
}
task genertateWorldSh(type : GenerateWorldShTask) {
    projectDir = project.projectDir
}
task newPlugin(type: NewPluginTask) {
    projectDir = projectDir.toString()
    pluginName = 'MyNew' // Change this to the desired plugin name
}
task newGenericMessage(type: NewGenericMessageTask) {
    projectDir = projectDir.toString()
    pluginName = 'MyNew' // Change this to the desired plugin name
    messageName = 'SomeMessageFromClient' // Change this to the desired plugin name
}
//   _____         _       
//  |_   _|__  ___| |_ ___ 
//    | |/ _ \/ __| __/ __|
//    | |  __/\__ \ |_\__ \
//    |_|\___||___/\__|___/
                        

tasks.test {
    useJUnitPlatform()
}