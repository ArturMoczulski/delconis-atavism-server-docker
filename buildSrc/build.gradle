// buildSrc/build.gradle
plugins {
    id 'java'
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    // Optional: Use a library like Reflections if you want a simpler API for class scanning
    implementation 'org.reflections:reflections:0.10.2'

    implementation 'io.micrometer:micrometer-registry-prometheus:1.7.3'
    implementation 'com.github.ben-manes.caffeine:caffeine:2.9.2'
    implementation 'org.recast4j:recast:1.5.5'
    implementation 'org.recast4j:detour:1.5.5'
    implementation 'org.recast4j:detour-crowd:1.5.5'
    implementation 'org.recast4j:detour-dynamic:1.5.5'
    implementation 'org.recast4j:detour-extras:1.5.5'
    implementation 'mysql:mysql-connector-java:8.0.28'
    implementation 'com.google.code.gson:gson:2.9.1'

    // JUnit Jupiter API and Engine for testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    // Use JUnit Jupiter BOM for consistent versioning
    testImplementation platform('org.junit:junit-bom:5.7.0')

    //local file
    implementation files("$rootDir/../atavism_server/dist/lib/atavism.jar")
}

sourceSets {
    main {
        java {
            // Include all the plugins
            file("$rootDir/../src/plugins").listFiles().each { File file ->
                if (file.isDirectory()) {
                    def pluginSrcDir = "${file.path}/src"
                    if (new File(pluginSrcDir).exists()) {
                        srcDirs += pluginSrcDir
                    }
                }
            }

            // Include the dependency Java files in 'lib'
            // This is where AGIS sources should live
            srcDir '../src/lib'

            // Include any other specific directory as needed
            include '**/*.java'
            exclude '**/*Test.java'
        }
    }
}