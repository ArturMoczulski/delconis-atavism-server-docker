// buildSrc/build.gradle
plugins {
    id 'java'
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    implementation 'org.reflections:reflections:0.10.2'
    implementation 'com.github.jknack:handlebars:4.3.1'

    implementation 'io.micrometer:micrometer-registry-prometheus:1.7.3'
    implementation 'com.github.ben-manes.caffeine:caffeine:2.9.2'
    implementation 'org.recast4j:recast:1.5.5'
    implementation 'org.recast4j:detour:1.5.5'
    implementation 'org.recast4j:detour-crowd:1.5.5'
    implementation 'org.recast4j:detour-dynamic:1.5.5'
    implementation 'org.recast4j:detour-extras:1.5.5'
    implementation 'mysql:mysql-connector-java:8.0.28'
    implementation 'com.google.code.gson:gson:2.9.1'

    // JUnit Jupiter API and Engine for testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    // Use JUnit Jupiter BOM for consistent versioning
    testImplementation platform('org.junit:junit-bom:5.7.0')

    //local file
    implementation files("$rootDir/../atavism_server/dist/lib/atavism.jar")
}

sourceSets {
    main {
        java {
            // Include all the plugins
            file("$rootDir/../src/plugins").listFiles().each { File file ->
                if (file.isDirectory()) {
                    def pluginSrcDir = "${file.path}/src"
                    if (new File(pluginSrcDir).exists()) {
                        srcDirs += pluginSrcDir
                    }
                }
            }

            // Include the dependency Java files in 'lib'
            // This is where AGIS sources should live
            srcDir '../src/lib'

            // Include any other specific directory as needed
            include '**/*.java'
            exclude '**/*Test.java'
        }
    }
}

def install = tasks.register("install", Exec) {
    commandLine 'sh', 'install.sh'
}

task unzipAtavismServer {
    doLast {
        // Define the path for the directory/symlink and the archive
        def serverDir = new File("$rootDir/../atavism_server")
        def extractionDir = new File("$rootDir/..")
        def archiveDir = new File("$rootDir/../archives")

        def archiveFile = { ->
            fileTree(archiveDir) {
                include 'atavism_server*.zip'
            }.files.find { it.exists() }
        }

        // Check if the atavism_server directory or symlink already exists
        if (serverDir.exists()) {
            println "✅ Atavism Server found in atavism_server/..."
        } else {
            // Check if the ZIP archive exists
            def archive = archiveFile()

            println 'Unzipping ' + archive.name + ' to atavism_server...'

            // Unzip the archive to the atavism_server directory
            ant.unzip(src: archive, dest: extractionDir)

            println '✅ Atavism Server unpacked to atavism_server/'
        }
    }
}

task unzipAgis {
    doLast {
        // Define the path for the directory/symlink and the archive
        def serverDir = new File("$rootDir/../src/lib/atavism")
        def extractionDir = new File("$rootDir/../src/lib")
        def archive = fileTree("$rootDir/../archives") {
            include 'agis*.zip'
        }.singleFile

        // Check if the atavism_server directory or symlink already exists
        if (serverDir.exists()) {
            println "✅ AGIS source code found in src/lib..."
        }
        else {
            // Check if the ZIP archive exists
            if (archive.exists()) {
                println 'Unzipping ' + archive.name + ' to src/lib...'

                // Unzip the archive to the atavism_server directory
                ant.unzip(src: archive, dest: extractionDir)

                println '✅ AGIS source code unpacked to src/lib/'
            } else {
                throw new GradleException('❌ No AGIS ZIP archive found in archives directory. Please put your downloaded ZIP copy of the AGIS source code on archives.')
            }
        }
    }
}

task unzipAtavismDependencies {
    dependsOn install
    dependsOn unzipAtavismServer, unzipAgis
}

compileJava.dependsOn unzipAtavismDependencies
